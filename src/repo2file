#!/usr/bin/env bash

# Error codes as named constants
declare -r ERR_CODE=1
declare -r INTERRUPT_CODE=2
declare -r DEP_MISSING_ERR_CODE=3
declare -r OUTPUT_FILE_ERR_CODE=4
declare -r GIT_REPO_ERR_CODE=5
declare -r FILE_ACCESS_ERR_CODE=6
declare -r EMPTY_DIR_ERR_CODE=7
declare -r DIR_CREATION_ERR_CODE=8

# Script metadata
declare -r SCRIPT_NAME=$(basename "$0")
declare -r WORKING_DIR=$(pwd)
declare -r TERM_COLUMNS=80
declare verbose=0 quiet=0 progress=0 use_gitignore=0
declare exclude_patterns=()
declare exclude_regex=""
declare temp_dir=""
declare output_file_name="repo2file.md"

# Set traps for different exit scenarios
trap 'graceful_exit $ERR_CODE' ERR
trap 'graceful_exit $INTERRUPT_CODE' INT TERM SIGHUP
trap 'graceful_exit $?' EXIT

# Clean up function
function cleanup() {
    # Ensure temp_dir is not unset or empty
    [[ -n "$temp_dir" && -d "$temp_dir" ]] && rm -rf "$temp_dir"
    set +f
}

# Function to perform cleanup and exit with the specified code
function graceful_exit() {
    local exit_code=$1

    cleanup

    case $exit_code in
    0)
        true
        ;;
    "$ERR_CODE")
        printf "An error occurred.\n"
        ;;
    "$INTERRUPT_CODE")
        printf "Script interrupted.\n"
        ;;
    "$DEP_MISSING_ERR_CODE")
        printf "Error: Dependency missing.\n"
        ;;
    "$OUTPUT_FILE_ERR_CODE")
        printf "Error: Output file error.\n"
        ;;
    "$GIT_REPO_ERR_CODE")
        printf "Error: Git repository error.\n"
        ;;
    "$FILE_ACCESS_ERR_CODE")
        printf "Error: File access error.\n"
        ;;
    "$EMPTY_DIR_ERR_CODE")
        printf "Error: Empty directory error.\n"
        ;;
    "$DIR_CREATION_ERR_CODE")
        printf "Error: Directory creation error.\n"
        ;;
    *)
        printf 'An unknown error occurred.\n'
        ;;
    esac

    exit "$exit_code"
}

# Dependency check function
function check_dependencies() {
    local dependencies=('git' 'file' 'tree')
    local missing_deps=()
    local install_cmd=""

    for dep in "${dependencies[@]}"; do
        command -v "$dep" >/dev/null || missing_deps+=("$dep")
    done

    if [ ${#missing_deps[@]} -ne 0 ]; then
        printf "Installing missing dependencies: %s\n" "${missing_deps[*]}"
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            # Detect Linux Distribution and set package manager
            if [ -f /etc/os-release ]; then
                . /etc/os-release
                case $ID in
                debian | ubuntu) install_cmd=("sudo" "apt-get" "install" "-y") ;;
                fedora | rhel | centos)
                    if [ "${VERSION_ID::1}" -ge 8 ]; then
                        install_cmd=("sudo" "dnf" "install" "-y")
                    else
                        install_cmd=("sudo" "yum" "install" "-y")
                    fi
                    ;;
                arch) install_cmd=("sudo" "pacman" "-S" "--noconfirm") ;;
                opensuse-leap | sles | opensuse-tumbleweed) install_cmd=("sudo" "zypper" "install" "-y") ;;
                alpine) install_cmd=("sudo" "apk" "add") ;;
                *)
                    echo "Unsupported distribution: $ID"
                    exit $DEP_MISSING_ERR_CODE
                    ;;
                esac
            else
                echo "Cannot identify the Linux distribution."
                exit $DEP_MISSING_ERR_CODE
            fi
        elif [[ "$OSTYPE" == "darwin" ]]; then
            # MacOS
            if ! command -v brew >/dev/null; then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            install_cmd=("brew" "install")
        elif [[ "$OSTYPE" == "linux-microsoft" ]]; then
            # Windows Subsystem for Linux
            install_cmd=("sudo" "apt-get" "install" "-y")
        else
            printf "Unsupported OS type: %s.\n" "$OSTYPE"
            exit $DEP_MISSING_ERR_CODE
        fi
        "${install_cmd[@]}" "${missing_deps[@]}"
    fi
}

# Function to check if the script is run from a git repository
function check_git_repository() {
    [ $verbose -eq 1 ] && printf -- "Checking git repository...\n"
    local git_dir=""

    git_dir=$(git rev-parse --git-dir 2>/dev/null)

    if [[ "$use_gitignore" -eq 1 && -z "$git_dir" ]]; then
        printf -- "This script should be run from a git repository when using --gitignore.\n"
        exit $GIT_REPO_ERR_CODE
    fi
}

# Convert glob patterns to regex
function glob_to_regex() {
    local pattern=$1
    local regex=""
    local i=0
    local len=${#pattern}
    local in_brackets=false

    for ((i = 0; i < len; i++)); do
        local c=${pattern:i:1}

        case "$c" in
        '[')
            in_brackets=true
            regex+="["
            ;;
        ']')
            if $in_brackets; then
                in_brackets=false
                regex+="]"
            else
                regex+="\\]"
            fi
            ;;
        '*')
            if $in_brackets; then
                regex+="*"
            else
                # Replace '**/' with '(.*/)?' to properly match any directory recursively
                if [ $i -gt 0 ] && [ "${pattern:i-1:1}" == '*' ] && [ "${pattern:i+1:1}" == '/' ]; then
                    regex+="(.*/)?"
                    (( i+=1 )) # Skip the '/' after '**'
                elif [ $i -eq 0 ] || [ "${pattern:i-1:1}" != '*' ]; then
                    regex+="[^/]*"
                fi
            fi
            ;;
        '?')
            if $in_brackets; then
                regex+="?"
            else
                regex+="."
            fi
            ;;
        '.')
            regex+="\\."
            ;;
        '/')
            regex+="\\/"
            ;;
        *)
            regex+="$c"
            ;;
        esac
    done

    
    if [[ "$pattern" == */ ]]; then
        # If the pattern ends with '/', match everything inside the directory recursively
        regex="^$regex.*"
    else
        # Ensure the pattern matches the whole string if it's a complete filename
        regex="^$regex$"
    fi

    printf -- "%s" "$regex"
}

# Function to compile the exclude regex
compile_exclusion_regex() {
    exclude_regex=""
    local regex_pattern=""
    for pattern in "${exclude_patterns[@]}"; do
        regex_pattern=$(glob_to_regex "$pattern")
        exclude_regex+="(^|/)$regex_pattern(\$|/)|"
        [ $verbose -eq 1 ] && printf "Compiled regex for pattern '%s': %s\n" "$pattern" "$regex_pattern"
    done
    exclude_regex="${exclude_regex%|}" # Remove trailing '|'
    [ $verbose -eq 1 ] && printf "Final compiled regex: %s\n" "$exclude_regex"
}

# Function to check if a file is text or binary
is_text_file() {
    local file="$1"
    if file -b --mime-type "$file" | grep -q 'text/'; then
        return 0 # It's text
    fi
    return 1 # It's binary or unknown
}

# Argument parsing
parse_args() {
    set -f
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        -h | --help)
            display_help_message
            exit 0
            ;;
        -v | --verbose)
            quiet=0
            verbose=1
            ;;
        -q | --quiet)
            quiet=1
            verbose=0
            progress=0
            ;;
        -p | --progress)
            quiet=0
            progress=1
            ;;
        -o | --output)
            shift
            if [[ -z "$1" ]]; then
                printf -- "Error: Output file was not specified.\n"
                exit $OUTPUT_FILE_ERR_CODE
            fi
            output_file_name="$1"
            if [[ ! -w "$(dirname "$output_file_name")" ]]; then
                printf -- "Error: Output directory for output file is not writable or does not exist.\n"
                exit $OUTPUT_FILE_ERR_CODE
            fi
            ;;
        -e | --exclude)
            shift
            if [[ -z "$1" ]]; then
                printf -- "Error: Exclude pattern was not specified.\n"
                exit $OUTPUT_FILE_ERR_CODE
            fi
            exclude_patterns+=("$1")
            ;;
        -g | --gitignore)
            use_gitignore=1
            ;;
        -*)
            # Handle multiple flags combined
            local combined_flags="${1#-}"
            for ((i = 0; i < ${#combined_flags}; i++)); do
                case "${combined_flags:i:1}" in
                v) [[ $quiet -eq 0 ]] && verbose=1 ;;
                q)
                    quiet=1
                    verbose=0
                    progress=0
                    ;;
                g) use_gitignore=1 ;;
                p) [[ $quiet -eq 0 ]] && progress=1 ;;
                *)
                    printf "Unknown flag: -%s\n" "${combined_flags:i:1}"
                    exit 0
                    ;;
                esac
            done
            ;;
        *)
            printf "Unknown parameter.\n"
            display_help_message
            exit 0
            ;;
        esac
        shift
    done
    compile_exclusion_regex
    set +f
}

# Function to display the help message
display_help_message() {
    cat <<-EOF
		Usage: $SCRIPT_NAME [options]

		This script processes the files within a Git repository, checking for text files and appending their contents and the project's directory structure to a markdown file.

		Options:
		  -h, --help           Show this help message and exit.
		  -v, --verbose        Enable verbose mode. Prints detailed logs to standard output.
		  -q, --quiet          Disable all output except errors.
		  -p, --progress       Enable progress display, showing a progress bar during execution.
		  -o, --output FILE    Specify the output markdown file where results should be written. Default is 'repo2file.md'.
		  -e, --exclude PATTERN Exclude files or directories that match this pattern. Can be specified multiple times.
		  -g, --gitignore      Apply .gitignore rules for excluding files.

		Examples:
		  ./$SCRIPT_NAME                          # Runs the script in the current directory with default settings.
		  ./$SCRIPT_NAME --output results.md      # Runs the script and outputs to 'results.md'.
		  ./$SCRIPT_NAME -v -p --exclude '*.tmp'  # Runs the script in verbose mode, shows progress, and excludes files matching '*.tmp'.
		  ./$SCRIPT_NAME -g                       # Applies .gitignore rules when processing files.
  ./$SCRIPT_NAME -vg                      # Runs the script in verbose mode and applies .gitignore rules when processing files.
  ./$SCRIPT_NAME -pg                      # Runs the script displaying progress and applies .gitignore rules when processing files.

		EOF
}

# Function to check whether a command is available or not
function is_command_available() {
    command -v "$1" >/dev/null 2>&1
}

# Function to create a dir with mktemp
function create_dir_with_mktemp() {
    local dir_path="$1"
    local dir_base="repo2file_"
    local project=""
    
    project="$(basename "$(pwd)" | sed 's/ /_/g')"
    mktemp -d "${dir_path}${dir_base}-${project}"
}

# Function to create a dir with tempfile for older distributions
function create_dir_with_tempfile() {
    local dir_path="$1"
    local dir_base="repo2file_"
    local project=""
    local temp_dir=""

    project=$(basename "$(pwd)")
    temp_dir=$(tempfile -d "${dir_path}" "${dir_base}" "${project}")
    printf -- "%s" "$temp_dir"
}

# Function to create a dir with mkdir as fallback
function create_unique_dir_fallback_mkdir() {
    local dir_path="$1"
    local dir_base="repo2file_"
    local max_attempts=100
    local attempt=0
    local _temp_dir=""

    while [ "$attempt" -lt "$max_attempts" ]; do
        attempt=$((attempt + 1))
        _temp_dir="${dir_path}/${dir_base}$(date +%s%N)_$$"

        if mkdir "$_temp_dir" 2>/dev/null; then
            printf -- "%s" "$_temp_dir"
            return
        fi
    done

    printf -- "Failed to create a temporary directory after %s attempts." "$max_attempts"
    return $DIR_CREATION_ERR_CODE
}

# Robust function to create unique temporary directories
function create_unique_dir() {
    local dir_path="$1"

    if is_command_available "mktemp"; then
        create_dir_with_mktemp "$dir_path"
    elif is_command_available "tempfile"; then
        create_dir_with_tempfile "$dir_path"
    else
        create_unique_dir_fallback_mkdir "$dir_path"
    fi
}

# Function to replicate the project in a temporary directory
function replicate_in_temp_dir() {
    local file_list=("$@")
    local tmp="${TMPDIR}"

    # Create a temporary directory
    [ $verbose -eq 1 ] && printf "Creating temporary directory\n"
    temp_dir=$(create_unique_dir "$tmp")
    [ $verbose -eq 1 ] && printf "  %s\n" "$temp_dir"

    # Copy the files to the temporary directory
    [ $verbose -eq 1 ] && printf "Copying files:\n"
    for file in "${file_list[@]}"; do
        temp_file_dir="$temp_dir/$(dirname "$file")"
        mkdir -p "$temp_file_dir" || {
            printf "Error creating directory: %s\n" "$temp_file_dir"
            exit $DIR_CREATION_ERR_CODE
        }
        cp -a "$WORKING_DIR/$file" "$temp_file_dir/$(basename "$file")" || {
            printf "Error copying file: %s\n" "$file"
            exit $FILE_ACCESS_ERR_CODE
        }
        [ $verbose -eq 1 ] && printf "  %s\n" "$file"
    done

    [ $verbose -eq 1 ] && printf "Finished replicating project\n"
}

# Function to collect and filter files based on exclude patterns
function collect_files() {
    local files=()
    local cmd="git ls-files -z --cached -o"

    [[ $use_gitignore -eq 1 ]] && cmd+=" --exclude-standard --exclude-from=$(git rev-parse --git-dir)/info/exclude"

    # Collect the files
    while IFS= read -r -d '' file; do
        #if [[ ! "$file" =~ $exclude_regex && "$file" != "$output_file_name" && "$file" != "$SCRIPT_NAME" && "$file" != ".gitignore" && ! -d "$WORKING_DIR/$file" ]]; then
        if [[ ! "$file" =~ $exclude_regex && "$file" != "$output_file_name" && "$file" != "$SCRIPT_NAME" && "$file" != ".gitignore" ]]; then
            files+=("$file")
        fi
    done < <($cmd || true)
    git_exit_code=$?

    # Check if git ls-files command failed
    if [ $git_exit_code -ne 0 ]; then
        printf "Error: git ls-files command failed with exit code %d\n" $git_exit_code
        exit $git_exit_code
    fi

    # Filter the binary files
    local filtered_files=()
    for file in "${files[@]}"; do
        if is_text_file "$file"; then
            filtered_files+=("$file")
        fi
    done
    files=("${filtered_files[@]}")

    printf "%s " "${files[@]}"
}

# Function to append the header to the output file
function append_header() {
    [ $verbose -eq 1 ] && printf -- "Initializing %s\n" "$output_file_name"
    {
        printf -- "# Project Codebase\n"
        printf -- "## Root directory\n \`%s\`\n" "$(pwd)"
        printf -- "---\n"
    } >"$output_file_name"
}

# Function to append the project tree to the output file
function append_directory_structure() {
    [ $verbose -eq 1 ] && printf -- "Appending directory structure to %s\n" "$output_file_name"
    {
        printf -- "## Directory structure:\n"
        printf -- "\`\`\`\n"
        tree "."
        printf -- "\`\`\`\n\n"
        printf -- "---\n"
    } >>"$output_file_name"
}

# Function to append the file contents to the output file
function append_file_content() {
    local relative_file_path=$1
    local full_file_path="$temp_dir/$relative_file_path"

    # Check if the file exists and is readable
    [[ ! -f "$full_file_path" || ! -r "$full_file_path" ]] && printf -- "File %s cannot be read or does not exist.\n" "$full_file_path" && return

    # Append the file content to the output file
    printf "## File: %s\n" "$relative_file_path" >>"$output_file_name"
    if [[ "${relative_file_path##*.}" == "md" ]]; then
        {
            printf -- "See raw %s for markdown file contents\n<!-- [FILE_START]\n" "$output_file_name"
            cat "$full_file_path"
            printf -- "\n[FILE_END] -->\n"
        }  >> "$output_file_name"
    else
        {
            printf -- "\`\`\`\n"
            cat "$full_file_path"
            printf -- "\`\`\`\n\n"
        }  >> "$output_file_name"
    fi
    printf -- "---\n" >>"$output_file_name"
}

# Function to print a progress bar
progress_hash=$(printf '%*s' 200 '' | tr ' ' '#')

function display_progress_bar() {
    local current=$1
    local total=$2
    local cols=0

    # Adapt to the terminal width using tput if available, otherwise fall back to $COLUMNS
    if command -v tput >/dev/null; then
        cols=$(tput cols)
        cols=$((cols - 10))
    else
        cols=$TERM_COLUMNS
    fi
    local percent=$((current * 100 / total))
    local filled=$((cols * current / total))
    printf -- "\r%3d%% [%-${cols}s]" "$percent" "${progress_hash:0:filled}"
}

# Process files in the project directory to be appended to the output file
function process_files() {
    local temp_dir=$1
    shift
    local file_list=("$@")
    local total_files=${#file_list[@]}
    local processed_files=0
    local last_updated=-1

    [ $verbose -eq 1 ] && printf -- "Processing %d files...\n" "${#file_list[@]}"

    for file in "${file_list[@]}"; do
        local relative_file_path="${file#"${WORKING_DIR}/"}"

        [ $verbose -eq 1 ] && printf -- "\n     %s\n" "$relative_file_path"

        append_file_content "$relative_file_path"

        if [ $progress -eq 1 ]; then
            ((processed_files++))
            local new_percent=$((processed_files * 100 / total_files))
            if [ $progress -eq 1 ] && [ "$new_percent" -ne "$last_updated" ]; then
                display_progress_bar "$processed_files" "$total_files"
                last_updated=$new_percent
            fi
        fi
    done

    printf "\n"
}

# Entry point of the script
function main() {
    parse_args "$@"
    check_dependencies
    check_git_repository
    local file_list=($(collect_files))
    [[ ${#file_list[@]} -eq 0 ]] && {
        printf "Error: No files to process.\n"
        exit $EMPTY_DIR_ERR_CODE
    }

    # Print the collected file_list
    [ $verbose -eq 1 ] && printf "Collected file_list:\n"
    for file in "${file_list[@]}"; do
        [ $verbose -eq 1 ] && printf "  %s\n" "$file"
    done

    append_header
    append_directory_structure
    replicate_in_temp_dir "${file_list[@]}"
    process_files "$temp_dir" "${file_list[@]}"
    cleanup
    [[ $quiet -eq 0 ]] && printf -- "Operation completed. Output stored in %s\n\n" "$output_file_name"
}

main "$@"
